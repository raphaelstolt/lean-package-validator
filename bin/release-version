#!/usr/bin/env php
<?php

$autoloads = [
    __DIR__ . '/../../../autoload.php',
    __DIR__ . '/../vendor/autoload.php',
    __DIR__ . '/vendor/autoload.php',
];

foreach ($autoloads as $autoload) {
    if (file_exists($autoload)) {
        require $autoload;
        break;
    }
}

use Composer\Semver\Comparator;
use Stolt\LeanPackage\Helpers\Str as OsHelper;
use PHLAK\SemVer\Version;

$binApplicationName = 'lean-package-validator';
$binFile = __DIR__ . DIRECTORY_SEPARATOR . $binApplicationName;
list($void, $binFileRelative) = explode($binApplicationName, $binFile, 2);
$shortBinFilePath = $binApplicationName . $binFileRelative;

$defaultReleaseMessage = 'Release {version}';
$acceptedIncrementSchemes = ['major', 'minor', 'patch'];
$defaultIncrementScheme = 'patch';
$incrementSchemeList = implode(', ', $acceptedIncrementSchemes);

$options = getopt('v:i::hm:', ['version:', 'increment::', 'help', 'release-message:']);

$help = <<<HELP
This command releases a new version without pushing it:

Usage:
  release-version [-hi <scheme> m <message> v <version-number>]

Options:
  -i, --increment <scheme>         The scheme (one of: {$incrementSchemeList}) to increment the
                                   release version number by [default: {$defaultIncrementScheme}]
  -m, --release-message <message>  The Git commit message for the release [default: "{$defaultReleaseMessage}"]
  -v, --version <version-number>   The version number to release, if set increment scheme is ignored
  -h, --help                       Display this help message

HELP;

if (array_key_exists('h', $options) || array_key_exists('help', $options)) {
    echo $help;
    exit(0);
}

/**
 * Check if current system is Windows.
 *
 * @return boolean
 */
function isWindows() {
    if (strtoupper(substr(PHP_OS, 0, 3)) !== 'WIN') {
        return false;
    }

    return true;
}

/**
 * Check if all preconditions for a release are met.
 *
 * @return boolean
 */
function fulfillsPreconditions()
{
    echo 'Checking release preconditions' . PHP_EOL;

    $precondictionCommands = [
        "composer lpv:cs-lint",
    ];

    foreach ($precondictionCommands as $command) {
        echo "> {$command}" . PHP_EOL;
        exec($command, $output, $returnCode);
        if (trim($output[0]) !== '') {
            echo $output[0] . PHP_EOL;
        }
        if (intval($returnCode) !== 0) {
            return false;
        }
    }

    return is_repository_in_releaseable_state();
}

/**
 * Check if repository is in releasable state which is given
 * when no uncommitted files are present.
 *
 * @return boolean
 */
function is_repository_in_releaseable_state() {
    if ((new OsHelper())->isWindows()) {
        exec('git status --porcelain | FIND /v /c ""', $output);
    } else {
        exec('expr $(git status --porcelain 2>/dev/null | egrep "^(M| M|D| D|\??)" | wc -l)', $output);
    }
    $numberOfUncommittedFiles = (int) $output[0];

    return $numberOfUncommittedFiles === 0;
}

/**
 * Return current version
 *
 * @return string
 */
function get_current_version() {
    exec('php bin/application-version --current-raw', $output);

    return $output[0];
}

if ($options === []) {
    echo 'No options set.' . PHP_EOL;
    exit(1);
}

$currentVersion = get_current_version();

$version = isset($options['version']) ? trim($options['version']) : null;
if ($version === null) {
    $version = isset($options['v']) ? trim($options['v']) : null;
}

if ($version) {
    if (Comparator::lessThanOrEqualTo($version, $currentVersion)) {
        echo "Earlier version '{$version}' provided." . PHP_EOL;
        exit(1);
    }
    unset($options['increment'], $options['i']);
}

$increment = isset($options['i']) ? trim($options['i']) : null;
if ($increment === null) {
    $increment = isset($options['increment']) ? trim($options['increment']) : null;
}

if (isset($options['i']) && $options['i'] === false
    || isset($options['increment']) && $options['increment'] === false
) {
    $increment = $defaultIncrementScheme;
}

if ($increment) {
    if (!in_array($increment, $acceptedIncrementSchemes)) {
        $message = "Invalid increment scheme '{$increment}' provided. "
            . "Pick one out of [{$incrementSchemeList}].";
        echo $message . PHP_EOL;
        exit(1);
    }

    switch ($increment) {
        case 'major':
            $version = (new Version($currentVersion))->incrementMajor()->__toString();
            break;
        case 'minor':
            $version = (new Version($currentVersion))->incrementMinor()->__toString();
            break;
        case 'patch':
            $version = (new Version($currentVersion))->incrementPatch()->__toString();
            break;
    }
}

if (!isset($version)) {
    $warning = "Could no resolve a version. Aborting release.";
    echo $warning . PHP_EOL;
    exit(1);
}

$overwrittenReleaseMessage = isset($options['m']) ? trim($options['m']) : null;
if ($overwrittenReleaseMessage === null) {
    $overwrittenReleaseMessage = isset($options['release-message']) ? trim($options['release-message']) : null;
}
if ($overwrittenReleaseMessage) {
    if (strstr('{version}', $overwrittenReleaseMessage) === false) {
        $warning = 'No {version} placeholder in provided release message '
            . 'present.';
        echo $warning . PHP_EOL;
    }
    $defaultReleaseMessage = $overwrittenReleaseMessage;
}

$releaseMessage = str_replace('{version}', $version, $defaultReleaseMessage);

if (fulfillsPreconditions()) {
    echo 'Releasing ' . $version . PHP_EOL;

    $releaseCommands = [
        "php bin/application-version --version {$version}",
        "git add bin/{$binApplicationName}",
        "git commit -m \"{$releaseMessage}\"",
        "git tag v{$version}",
    ];

    foreach ($releaseCommands as $command) {
        echo "> {$command}" . PHP_EOL;
        exec($command, $output);
        if (trim($output[0]) !== '') {
            echo $output[0] . PHP_EOL;
        }
    }

    echo "Released version {$version}." . PHP_EOL;
    exit(0);
}

$warning = "There seem to be uncommitted files present. Aborting release.";
echo $warning . PHP_EOL;
exit(1);

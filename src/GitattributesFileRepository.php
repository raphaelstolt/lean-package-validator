<?php

declare(strict_types=1);

namespace Stolt\LeanPackage;

use Stolt\LeanPackage\Exceptions\GitattributesCreationFailed;

final class GitattributesFileRepository
{
    public const GENERATED_HEADER = '# This file was generated by the lean package validator (http://git.io/lean-package-validator).';
    public const MODIFIED_HEADER  = '# This file was partly modified by the lean package validator (http://git.io/lean-package-validator).';

    protected Analyser $analyser;

    public function __construct(Analyser $analyser)
    {
        $this->analyser = $analyser;
    }

    /**
     * Create the gitattributes file.
     *
     * @param  string  $content The content of the gitattributes file
     * @param  bool    $withHeader Whether to prepend the generated header
     * @throws GitattributesCreationFailed
     * @return string
     *
     */
    public function createGitattributesFile(string $content, bool $withHeader = true): string
    {
        // Ensure the "generated by" header is present when requested.
        if ($withHeader) {
            $headerPrefix = self::GENERATED_HEADER . PHP_EOL . PHP_EOL;

            if (!\str_starts_with($content, self::GENERATED_HEADER . PHP_EOL)
                && !\str_starts_with($content, $headerPrefix)
            ) {
                $content = $headerPrefix . $content;
            }
        }

        $bytesWritten = file_put_contents(
            $this->analyser->getGitattributesFilePath(),
            $content
        );

        if ($bytesWritten) {
            $content = 'Created a .gitattributes file with the shown content:'
                . PHP_EOL . '<info>' . $content . '</info>';

            return PHP_EOL . PHP_EOL . $content;
        }

        $message = 'Creation of .gitattributes file failed.';
        throw new GitattributesCreationFailed($message);
    }

    /**
     * Overwrite an existing gitattributes file.
     *
     * @param  string  $content The content of the gitattributes file
     * @throws GitattributesCreationFailed
     * @return string
     *
     */
    public function overwriteGitattributesFile(string $content): string
    {
        // Apply header policy before writing (generated â†’ partly modified).
        $content = $this->applyOverwriteHeaderPolicy($content);

        $bytesWritten = file_put_contents(
            $this->analyser->getGitattributesFilePath(),
            $content
        );

        if ($bytesWritten) {
            $content = 'Overwrote it with the shown content:'
                . PHP_EOL . '<info>' . $content . '</info>';

            return PHP_EOL . PHP_EOL . $content;
        }

        $message = 'Overwrite of .gitattributes file failed.';
        throw new GitattributesCreationFailed($message);
    }

    /**
     * Prepare .gitattributes content for overwriting by adjusting the header.
     * If the present file contains the "generated by" header, replace it with
     * the "partly modified by" header in the given content-to-write.
     */
    public function applyOverwriteHeaderPolicy(string $contentToWrite): string
    {
        $gitattributesPath = $this->analyser->getGitattributesFilePath();

        if (!\is_file($gitattributesPath)) {
            return $contentToWrite;
        }

        $presentContent = (string) @\file_get_contents($gitattributesPath);
        if ($presentContent === '') {
            return $contentToWrite;
        }

        if (\str_contains($presentContent, self::GENERATED_HEADER)) {
            $generatedPrefix = self::GENERATED_HEADER . PHP_EOL;
            $modifiedPrefix  = self::MODIFIED_HEADER . PHP_EOL;

            // If the new content starts with the "generated by" header, replace it.
            if (\str_starts_with($contentToWrite, $generatedPrefix)) {
                return $modifiedPrefix . \substr($contentToWrite, \strlen($generatedPrefix));
            }

            // If no header is present at the top, prepend the "partly modified" header.
            if (!\str_starts_with($contentToWrite, $modifiedPrefix)) {
                return self::MODIFIED_HEADER . PHP_EOL . PHP_EOL . $contentToWrite;
            }
        }

        return $contentToWrite;
    }
}

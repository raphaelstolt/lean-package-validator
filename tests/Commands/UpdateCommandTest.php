<?php

declare(strict_types=1);

namespace Stolt\LeanPackage\Tests\Commands;

use PHPUnit\Framework\Attributes\Test;
use Stolt\LeanPackage\Analyser;
use Stolt\LeanPackage\Commands\CreateCommand;
use Stolt\LeanPackage\Commands\UpdateCommand;
use Stolt\LeanPackage\GitattributesFileRepository;
use Stolt\LeanPackage\Helpers\Str as OsHelper;
use Stolt\LeanPackage\Presets\Finder;
use Stolt\LeanPackage\Presets\PhpPreset;
use Stolt\LeanPackage\Tests\TestCase;
use Zenstruck\Console\Test\TestCommand;

final class UpdateCommandTest extends TestCase
{
    protected function setUp(): void
    {
        $this->setUpTemporaryDirectory();
    }

    protected function tearDown(): void
    {
        $this->removeDirectory($this->temporaryDirectory);
    }

    #[Test]
    public function updatesExistingGitattributesAndReplacesHeader(): void
    {
        if ((new OsHelper())->isWindows()) {
            $this->markTestSkipped('Skipping test on Windows systems');
        }

        $analyser = (new Analyser(new Finder(new PhpPreset())))->setDirectory($this->temporaryDirectory);
        $repository = new GitattributesFileRepository($analyser);
        $command = new UpdateCommand($analyser, $repository);

        $artifactFilenames = ['.gitignore'];

        $this->createTemporaryFiles(
            $artifactFilenames,
            ['tests', '.github']
        );

        $gitattributesContent = <<<CONTENT
# This file was generated by the lean package validator (http://git.io/lean-package-validator).

.gitattributes export-ignore
.github/ export-ignore
tests/ export-ignore
CONTENT;

        $this->createTemporaryGitattributesFile($gitattributesContent);

        TestCommand::for($command)
            ->addArgument($this->temporaryDirectory)
            ->execute()
            ->assertSuccessful()
            ->assertOutputContains("The .gitattributes file at {$this->temporaryDirectory} has been updated.");

        $gitattributesPath = $this->temporaryDirectory . DIRECTORY_SEPARATOR . '.gitattributes';
        $this->assertFileExists($gitattributesPath);

        $content = (string) \file_get_contents($gitattributesPath);

        // Header should be the "modified" one after update
        $this->assertStringContainsString(
            '# This file was partly modified by the lean package validator (http://git.io/lean-package-validator).',
            $content
        );

        // Sanity: should still contain export-ignore entries and likely 'tests/' gets added
        $this->assertStringContainsString('.gitattributes', $content);
        $this->assertStringContainsString('.github/', $content);
        $this->assertStringContainsString('tests/', $content);
        $this->assertStringContainsString('export-ignore', $content);
    }
    #[Test]
    public function failsWhenNoGitattributesFileIsPresent(): void
    {
        if ((new OsHelper())->isWindows()) {
            $this->markTestSkipped('Skipping test on Windows systems');
        }

        // Remove the file
        \unlink($this->temporaryDirectory . DIRECTORY_SEPARATOR . '.gitattributes');

        $analyser = (new Analyser(new Finder(new PhpPreset())))->setDirectory($this->temporaryDirectory);
        $repository = new GitattributesFileRepository($analyser);
        $command = new UpdateCommand($analyser, $repository);

        TestCommand::for($command)
            ->addArgument($this->temporaryDirectory)
            ->execute()
            ->assertFaulty()
            ->assertOutputContains('No .gitattributes file found. Use the create command to create one first.');
    }

    #[Test]
    public function printsExpectedContentWithoutWritingAFile(): void
    {
        $analyser = (new Analyser(new Finder(new PhpPreset())))->setDirectory($this->temporaryDirectory);
        $repository = new GitattributesFileRepository($analyser);
        $command = new UpdateCommand($analyser, $repository);

        $artifactFilenames = ['README.md', '.gitignore', 'phpunit.xml.dist'];

        $this->createTemporaryFiles(
            $artifactFilenames,
            ['tests']
        );

        $result = TestCommand::for($command)
            ->addArgument($this->temporaryDirectory)
            ->addOption('dry-run')
            ->addOption('align-export-ignores')
            ->execute()
            ->assertSuccessful();

        $output = $result->output();

        $this->assertStringContainsString('export-ignore', $output);
        $this->assertStringNotContainsString('has been updated', $output);

        $this->assertFileDoesNotExist($this->temporaryDirectory . DIRECTORY_SEPARATOR . '.gitattributes');
    }
}
